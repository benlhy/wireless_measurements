C51 COMPILER V9.60.0.0   INTERRUPTS                                                        09/22/2021 15:50:14 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INTERRUPTS
OBJECT MODULE PLACED IN .\src\Interrupts.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\Ben\Doc
                    -uments\Git\wireless_measurements\software\firmware\EFM8_SWM\src\Interrupts.c OMF2 LARGE DEBUG OBJECTEXTEND ROM(LARGE) WA
                    -RNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(0,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Ben\Documents
                    -\Git\wireless_measurements\software\firmware\EFM8_SWM\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.1/
                    -/kits/common/drivers/efm8_retargetserial;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.1//Device/shared/si
                    -8051Base;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.1//Device/EFM8LB1/inc) PRINT(.\src\Interrupts.lst) 
                    -COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\Interrupts.OBJ)

line level    source

   1          //=========================================================
   2          // src/Interupts.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES                        
  10          #include <SI_EFM8LB1_Register_Enums.h>
  11          #include "retargetserial.h"
  12          #include "vars.h"
  13          
  14          volatile int send_msg;
  15          volatile int adc1;
  16          volatile int adc2;
  17          volatile int adc3;
  18          volatile int adc4;
  19          volatile int multiplier;
  20          
  21          SI_SBIT(PWRC, SFR_P1, 2);                  // P1.2 PWRC
  22          SI_SBIT(LED, SFR_P1, 0);// P1.0 LED
  23          
  24          //SI_SBIT(IDLE,PCON0,0);// set IDLE mode
  25          //SI_SBIT(SNOOZE,PCON1,7);// set SNOOZE mode
  26          
  27          SI_SBIT (HALL, SFR_P0, 6); // port match pin
  28          
  29          
  30          
  31          //-----------------------------------------------------------------------------
  32          // ADC0EOC_ISR
  33          //-----------------------------------------------------------------------------
  34          //
  35          // ADC0EOC ISR Content goes here. Remember to clear flag bits:
  36          // ADC0CN0::ADINT (Conversion Complete Interrupt Flag)
  37          //
  38          // This ISR averages 2048 samples then prints the result to the terminal.  The
  39          // ISR is called after each ADC conversion which is triggered by Timer2.
  40          //
  41          //-----------------------------------------------------------------------------
  42          SI_INTERRUPT(ADC0EOC_ISR, ADC0EOC_IRQn)
  43            {
  44   1          static uint32_t accumulator = 0;     // Accumulator for averaging
  45   1          static uint16_t measurements = 2048;// Measurement counter
  46   1          uint32_t result = 0;
  47   1          uint32_t mV;// Measured voltage in mV
  48   1          uint32_t uA;
  49   1          int R1;
  50   1          int R2;
C51 COMPILER V9.60.0.0   INTERRUPTS                                                        09/22/2021 15:50:14 PAGE 2   

  51   1          //uint8_t SFRPAGE_save;
  52   1      
  53   1          //LED=1; // turn on the LED
  54   1      
  55   1          // Select a pin
  56   1      
  57   1          switch(send_msg)
  58   1            {
  59   2              case 0:
  60   2              ADC0MX = ADC0MX_ADC0MX__ADC0P13; // select ADC13- P1.7
  61   2              break;
  62   2              case 1:
  63   2              ADC0MX = ADC0MX_ADC0MX__ADC0P12;
  64   2              break;
  65   2              case 2:
  66   2              ADC0MX = ADC0MX_ADC0MX__ADC0P11;
  67   2              break;
  68   2              case 3:
  69   2              ADC0MX = ADC0MX_ADC0MX__ADC0P10;
  70   2              break;
  71   2              default:
  72   2              break;
  73   2            }
  74   1      
  75   1          accumulator += ADC0;
  76   1          measurements--;
  77   1      
  78   1          if(measurements == 0)
  79   1            {
  80   2              measurements = 2048;
  81   2              result = accumulator / 2048;
  82   2              accumulator = 0;
  83   2      
  84   2              // The 14-bit ADC value is averaged across 2048 measurements.
  85   2              // The measured voltage applied to P1.7 is then:
  86   2              //
  87   2              //                           Vref (mV)
  88   2              //   measurement (mV) =   --------------- * result (bits)
  89   2              //                       (2^14)-1 (bits)
  90   2      
  91   2              mV = (result * 3300) / 16383;
  92   2              R1 = 30;
  93   2              R2 = 56;
  94   2              // U4 is
  95   2      #ifdef MINI
  96   2                R1 = 10;
  97   2      #endif
  98   2      
  99   2      #ifdef W_VER
 100   2                multiplier = 200;
 101   2      #elif H_VER
                        multiplier = 100;
              #elif F_VER
                        multiplier = 50;
              #endif
 106   2      
 107   2              switch(send_msg)
 108   2                {
 109   3                  case 0:
 110   3                  uA = (uint32_t)((result * 2400) / (16383*scale) * 1000 / (multiplier*R1/10));
 111   3                  adc1 = uA;
 112   3                  break;
 113   3                  case 1:
C51 COMPILER V9.60.0.0   INTERRUPTS                                                        09/22/2021 15:50:14 PAGE 3   

 114   3                  uA = (result * 3277) / 16383 * 1000 / (200*R1/10);
 115   3                  adc2 = uA;
 116   3      #ifdef MINI
 117   3                       adc2= mV;
 118   3      #endif
 119   3                  break;
 120   3                  case 2:
 121   3                  adc3 = mV;
 122   3                  break;
 123   3                  case 3:
 124   3                  adc4 = mV;
 125   3      #ifdef MINI
 126   3                       // high voltage element 110k/10k
 127   3      
 128   3      #endif
 129   3      
 130   3                  break;
 131   3                  default:
 132   3                  break;
 133   3                }
 134   2              send_msg++; // increment count
 135   2      
 136   2              //SFRPAGE_save = SFRPAGE;
 137   2              //SFRPAGE = LEGACY_PAGE;
 138   2              //RETARGET_PRINTF ("\nP1.7 voltage: %ld mV\n", mV);
 139   2              //SFRPAGE = SFRPAGE_save;
 140   2              //LED = 0; // turn off the LED
 141   2            }
 142   1      
 143   1          ADC0CN0_ADINT = 0;              // Clear ADC0 conv. complete flag
 144   1        }
 145          
 146          //-----------------------------------------------------------------------------
 147          // PMATCH_ISR
 148          //-----------------------------------------------------------------------------
 149          //
 150          // PMATCH ISR Content goes here. Remember to clear flag bits:
 151          
 152          //
 153          //-----------------------------------------------------------------------------
 154          SI_INTERRUPT (PMATCH_ISR, PMATCH_IRQn)
 155            {
 156   1        RETARGET_PRINTF ("\nPort Match Interrupt fired");
 157   1        PWRC = 0; // wake BLE module
 158   1        SFRPAGE = LEGACY_PAGE;
 159   1        EIE1 &= ~0x02; // disable Interrupt
 160   1        }
 161          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    826    ----
   CONSTANT SIZE    =     28    ----
   XDATA SIZE       =     34    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.60.0.0   INTERRUPTS                                                        09/22/2021 15:50:14 PAGE 4   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
