C51 COMPILER V9.60.0.0   INTERRUPTS                                                        09/27/2021 09:12:37 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INTERRUPTS
OBJECT MODULE PLACED IN .\src\Interrupts.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\Ben\Doc
                    -uments\Git\wireless_measurements\software\firmware\EFM8_SWM\src\Interrupts.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WA
                    -RNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(0,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Ben\Documents
                    -\Git\wireless_measurements\software\firmware\EFM8_SWM\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.1/
                    -/kits/common/drivers/efm8_retargetserial;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.1//Device/shared/si
                    -8051Base;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.1//Device/EFM8LB1/inc) PRINT(.\src\Interrupts.lst) 
                    -COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\Interrupts.OBJ)

line level    source

   1          //=========================================================
   2          // src/Interupts.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES                        
  10          #include <SI_EFM8LB1_Register_Enums.h>
  11          #include "vars.h"
  12          
  13          volatile int send_msg;
  14          volatile int adc1;
  15          volatile int adc2;
  16          volatile int adc3;
  17          volatile int adc4;
  18          
  19          
  20          SI_SBIT(PWRC, SFR_P1, 2);                  // P1.2 PWRC
  21          SI_SBIT(LED, SFR_P1, 0);// P1.0 LED
  22          
  23          //SI_SBIT(IDLE,PCON0,0);// set IDLE mode
  24          //SI_SBIT(SNOOZE,PCON1,7);// set SNOOZE mode
  25          
  26          SI_SBIT (HALL, SFR_P0, 6);// port match pin
  27          
  28          //-----------------------------------------------------------------------------
  29          // ADC0EOC_ISR
  30          //-----------------------------------------------------------------------------
  31          //
  32          // ADC0EOC ISR Content goes here. Remember to clear flag bits:
  33          // ADC0CN0::ADINT (Conversion Complete Interrupt Flag)
  34          //
  35          // This ISR averages 2048 samples then prints the result to the terminal.  The
  36          // ISR is called after each ADC conversion which is triggered by Timer2.
  37          //
  38          //-----------------------------------------------------------------------------
  39          SI_INTERRUPT(ADC0EOC_ISR, ADC0EOC_IRQn)
  40            {
  41   1          static uint32_t accumulator = 0;     // Accumulator for averaging
  42   1          static uint16_t measurements = 2048;// Measurement counter
  43   1          uint32_t result = 0;
  44   1          uint32_t mV;// Measured voltage in mV
  45   1          uint32_t uA;
  46   1      
  47   1          //uint8_t SFRPAGE_save;
  48   1      
  49   1          //LED=1; // turn on the LED
  50   1      
C51 COMPILER V9.60.0.0   INTERRUPTS                                                        09/27/2021 09:12:37 PAGE 2   

  51   1          // Select a pin
  52   1      
  53   1          switch(send_msg)
  54   1            {
  55   2              case 0:
  56   2              ADC0MX = ADC0MX_ADC0MX__ADC0P13; // select ADC13- P1.7
  57   2              break;
  58   2              case 1:
  59   2              ADC0MX = ADC0MX_ADC0MX__ADC0P12;// select ADC12- P1.6
  60   2              break;
  61   2              case 2:
  62   2              ADC0MX = ADC0MX_ADC0MX__ADC0P11;// select ADC11- P1.5
  63   2              break;
  64   2              case 3:
  65   2              ADC0MX = ADC0MX_ADC0MX__ADC0P10;// select ADC10- P1.4
  66   2              break;
  67   2              default:
  68   2              break;
  69   2            }
  70   1      
  71   1          accumulator += ADC0;
  72   1          measurements--;
  73   1      
  74   1          if(measurements == 0)
  75   1            {
  76   2              measurements = 2048;
  77   2              result = accumulator / 2048;
  78   2              accumulator = 0;
  79   2      
  80   2              // The 14-bit ADC value is averaged across 2048 measurements.
  81   2              // The measured voltage applied to P1.7 is then:
  82   2              //
  83   2              //                           Vref (mV)
  84   2              //   measurement (mV) =   --------------- * result (bits)
  85   2              //                       (2^14)-1 (bits)
  86   2      
  87   2              mV = (result * 3300) / 16383;
  88   2      
  89   2      
  90   2              switch(send_msg)
  91   2                {
  92   3                  case 0:
  93   3                    uA = (uint32_t)((result * 2400) / (16383*SCALE) * 1000/ (MULTIPLIER*RESISTOR1/10));
  94   3                    adc1 = uA;
  95   3                    break;
  96   3                  case 1:
  97   3      #ifdef GUM
                            uA = (result * 3277) / 16383 * 1000 / (200*RESISTOR1/10);
                            adc2 = uA;
              #endif
 101   3      #ifdef MINI
 102   3                    adc2= (uint32_t)((result * 2400) / (16383*SCALE));// convert to mV so no decimals
 103   3      #endif
 104   3                    break;
 105   3                  case 2:
 106   3      #ifdef GUM
                            adc3 = mV;
              #endif
 109   3      #ifdef MINI
 110   3                    //adc3= (result * 2400 *100) / (16383*scale); // convert to mV so no decimals
 111   3                    adc3 = (result * 2400 ) / (16383*SCALE);
 112   3      #endif
 113   3                  break;
C51 COMPILER V9.60.0.0   INTERRUPTS                                                        09/27/2021 09:12:37 PAGE 3   

 114   3                  case 3:
 115   3                  adc4 = mV;
 116   3      #ifdef MINI
 117   3                       // high voltage element 110k/10k
 118   3                 // V_high * 10 / (110 + 10 ) = V_measured
 119   3                  adc4 = (uint32_t)((result*2400*100)/(16383*SCALE) * 120/10 ); // measured in mV
 120   3      #endif
 121   3      
 122   3                  break;
 123   3                  default:
 124   3                  break;
 125   3                }
 126   2              send_msg++; // increment count
 127   2      
 128   2              //SFRPAGE_save = SFRPAGE;
 129   2              //SFRPAGE = LEGACY_PAGE;
 130   2              //RETARGET_PRINTF ("\nP1.7 voltage: %ld mV\n", mV);
 131   2              //SFRPAGE = SFRPAGE_save;
 132   2              //LED = 0; // turn off the LED
 133   2            }
 134   1      
 135   1          ADC0CN0_ADINT = 0;              // Clear ADC0 conv. complete flag
 136   1        }
 137          
 138          //-----------------------------------------------------------------------------
 139          // PMATCH_ISR
 140          //-----------------------------------------------------------------------------
 141          //
 142          // PMATCH ISR Content goes here. Remember to clear flag bits:
 143          
 144          //
 145          //-----------------------------------------------------------------------------
 146          
 147          SI_INTERRUPT (PMATCH_ISR, PMATCH_IRQn)
 148            {
 149   1          //RETARGET_PRINTF ("\nPort Match Interrupt fired");
 150   1          // TODO: check if it is the pin we care about
 151   1          if (false)
 152   1            {
 153   2              PWRC = 0; // wake BLE module
 154   2              SFRPAGE = LEGACY_PAGE;
 155   2              //EIE1 &= ~0x02; // disable Port Match interrupt
 156   2            }
 157   1          EIE1 &= ~0x02; // disable Port Match interrupt
 158   1        }
 159          
 160          //-----------------------------------------------------------------------------
 161          // TIMER4_ISR
 162          //-----------------------------------------------------------------------------
 163          //
 164          // TIMER4 ISR Content goes here. Remember to clear flag bits:
 165          // TMR4CN0::TF4H (Timer # High Byte Overflow Flag)
 166          // TMR4CN0::TF4L (Timer # Low Byte Overflow Flag)
 167          //
 168          //-----------------------------------------------------------------------------
 169          SI_INTERRUPT (TIMER4_ISR, TIMER4_IRQn)
 170            {
 171   1      
 172   1        }
 173          
*** WARNING C294 IN LINE 153 OF C:\Users\Ben\Documents\Git\wireless_measurements\software\firmware\EFM8_SWM\src\Interrup
             -ts.c: unreachable code

C51 COMPILER V9.60.0.0   INTERRUPTS                                                        09/27/2021 09:12:37 PAGE 4   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    535    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     28    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
