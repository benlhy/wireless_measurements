C51 COMPILER V9.60.0.0   INTERRUPTS                                                        09/10/2021 08:59:33 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INTERRUPTS
OBJECT MODULE PLACED IN .\src\Interrupts.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\Ben\Doc
                    -uments\Git\wireless_measurements\software\firmware\EFM8_SWM\src\Interrupts.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WA
                    -RNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(0,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Ben\Documents
                    -\Git\wireless_measurements\software\firmware\EFM8_SWM\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.1/
                    -/kits/common/drivers/efm8_retargetserial;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.1//Device/shared/si
                    -8051Base;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.1//Device/EFM8LB1/inc) PRINT(.\src\Interrupts.lst) 
                    -COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\Interrupts.OBJ)

line level    source

   1          //=========================================================
   2          // src/Interupts.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9                   
  10          // USER INCLUDES                        
  11          #include <SI_EFM8LB1_Register_Enums.h>
  12          #include "retargetserial.h"
  13          #include "vars.h"
  14          
  15          volatile int send_msg;
  16          volatile int adc1;
  17          volatile int adc2;
  18          volatile int adc3;
  19          volatile int adc4;
  20          volatile int multiplier;
  21          
  22          SI_SBIT(PWRC, SFR_P1, 2);                  // P1.2 PWRC
  23          SI_SBIT(LED, SFR_P1, 0);                  // P1.0 LED
  24          
  25          
  26          
  27          
  28          
  29          
  30          //-----------------------------------------------------------------------------
  31          // ADC0EOC_ISR
  32          //-----------------------------------------------------------------------------
  33          //
  34          // ADC0EOC ISR Content goes here. Remember to clear flag bits:
  35          // ADC0CN0::ADINT (Conversion Complete Interrupt Flag)
  36          //
  37          // This ISR averages 2048 samples then prints the result to the terminal.  The
  38          // ISR is called after each ADC conversion which is triggered by Timer2.
  39          //
  40          //-----------------------------------------------------------------------------
  41          SI_INTERRUPT(ADC0EOC_ISR, ADC0EOC_IRQn)
  42          {
  43   1         static uint32_t accumulator = 0;     // Accumulator for averaging
  44   1         static uint16_t measurements = 2048; // Measurement counter
  45   1         uint32_t result = 0;
  46   1         uint32_t mV;                         // Measured voltage in mV
  47   1         uint32_t uA;
  48   1         uint8_t SFRPAGE_save;
  49   1      
  50   1         //LED=1; // turn on the LED
C51 COMPILER V9.60.0.0   INTERRUPTS                                                        09/10/2021 08:59:33 PAGE 2   

  51   1      
  52   1         // Select a pin
  53   1      
  54   1      
  55   1         switch(send_msg) {
  56   2           case 0:
  57   2             ADC0MX = ADC0MX_ADC0MX__ADC0P13; // select ADC13- P1.7
  58   2             break;
  59   2           case 1:
  60   2             ADC0MX = ADC0MX_ADC0MX__ADC0P12;
  61   2             break;
  62   2           case 2:
  63   2             ADC0MX = ADC0MX_ADC0MX__ADC0P11;
  64   2             break;
  65   2           case 3:
  66   2             ADC0MX = ADC0MX_ADC0MX__ADC0P10;
  67   2             break;
  68   2           default:
  69   2             break;
  70   2         }
  71   1      
  72   1      
  73   1      
  74   1      
  75   1      
  76   1         accumulator += ADC0;
  77   1         measurements--;
  78   1      
  79   1         if(measurements == 0)
  80   1         {
  81   2                measurements = 2048;
  82   2                result = accumulator / 2048;
  83   2                accumulator = 0;
  84   2      
  85   2                // The 14-bit ADC value is averaged across 2048 measurements.
  86   2                // The measured voltage applied to P1.7 is then:
  87   2                //
  88   2                //                           Vref (mV)
  89   2                //   measurement (mV) =   --------------- * result (bits)
  90   2                //                       (2^14)-1 (bits)
  91   2      
  92   2                mV =  (result * 3300) / 16383;
  93   2                R1 = 3.0;
  94   2                R2 = 5.6;
  95   2                // U4 is
  96   2      #ifdef MINI
  97   2                R1 = 1.0;
  98   2      #endif
  99   2      
 100   2      #ifdef W_VER
 101   2                multiplier = 200;
 102   2      #elif H_VER
                        multiplier = 100;
              #elif F_VER
                        multiplier = 50;
              #endif
 107   2      
 108   2      
 109   2      
 110   2                switch(send_msg) {
 111   3                     case 0:
 112   3                       uA = (uint32_t)((result * 2400) / (16383*SCALE) * 1000 / (multiplier*R1));
 113   3                       adc1 = uA;
C51 COMPILER V9.60.0.0   INTERRUPTS                                                        09/10/2021 08:59:33 PAGE 3   

 114   3                       break;
 115   3                     case 1:
 116   3                       uA = (result * 3277) / 16383 * 1000 / (200*R1);
 117   3                       adc2 = uA;
 118   3      #ifdef MINI
 119   3                       adc2= mV;
 120   3      #endif
 121   3                       break;
 122   3                     case 2:
 123   3                       adc3 = mV;
 124   3                       break;
 125   3                     case 3:
 126   3                       adc4 = mV;
 127   3      #ifdef MINI
 128   3                       // high voltage element 110k/10k
 129   3      
 130   3      #endif
 131   3      
 132   3                       break;
 133   3                     default:
 134   3                       break;
 135   3                }
 136   2                send_msg++; // increment count
 137   2      
 138   2      
 139   2                SFRPAGE_save = SFRPAGE;
 140   2                SFRPAGE = LEGACY_PAGE;
 141   2                //RETARGET_PRINTF ("\nP1.7 voltage: %ld mV\n", mV);
 142   2                SFRPAGE = SFRPAGE_save;
 143   2                //LED = 0; // turn off the LED
 144   2         }
 145   1      
 146   1         ADC0CN0_ADINT = 0;              // Clear ADC0 conv. complete flag
 147   1      }
 148          
 149          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    584    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     31    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
