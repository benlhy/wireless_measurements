C51 COMPILER V9.60.0.0   EFM8LB1_ADC_EXTERNALINPUT                                         09/10/2021 16:28:02 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE EFM8LB1_ADC_EXTERNALINPUT
OBJECT MODULE PLACED IN .\src\EFM8LB1_ADC_ExternalInput.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\Ben\Doc
                    -uments\Git\wireless_measurements\software\firmware\EFM8_SWM\src\EFM8LB1_ADC_ExternalInput.c OMF2 SMALL DEBUG OBJECTEXTEN
                    -D ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(0,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\User
                    -s\Ben\Documents\Git\wireless_measurements\software\firmware\EFM8_SWM\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sd
                    -ks/8051/v4.2.1//kits/common/drivers/efm8_retargetserial;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.1//D
                    -evice/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.1//Device/EFM8LB1/inc) PRINT(.\src\E
                    -FM8LB1_ADC_ExternalInput.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\EFM8LB1_ADC_ExternalInput.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // EFM8LB1_ADC_ExternalInput.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // This example code takes and averages 2048 analog measurements from input
  10          // P1.7 using ADC0, then prints the results to a terminal window via the UART.
  11          //
  12          // The system is clocked by the internal 24.5 MHz oscillator divided by 1.
  13          // Timer 2 triggers a conversion on ADC0 on each overflow.  The completion of
  14          // this conversion in turn triggers an interrupt service routine (ISR).  The ISR
  15          // averages 2048 measurements, then prints the value to the terminal via printf
  16          // before starting another average cycle.
  17          //
  18          // The analog multiplexer selects P1.7 as the positive ADC0 input. This pin is
  19          // configured as an analog input in the port initialization routine. The
  20          // negative ADC0 input is connected via mux to ground, which provides for a
  21          // single-ended ADC input.
  22          //
  23          // An analog joystick is connected to P1.7. Each joystick position corresponds
  24          // to a unique voltage.
  25          //
  26          // Terminal output is done via printf, which directs the characters to
  27          // UART0.  A UART initialization routine is therefore necessary.
  28          //
  29          // ADC Settling Time Requirements, Sampling Rate:
  30          // ----------------------------------------------
  31          //
  32          // The total sample time per input is comprised of an input setting time
  33          // (Tsettle), followed by a conversion time (Tconvert):
  34          //
  35          // Tsample  = Tsettle + Tconvert
  36          //
  37          // |--------Settling-------|==Conversion==|----Settling--- . . .
  38          // Timer 2 overflow        ^
  39          // ADC0 ISR                               ^
  40          //
  41          // The ADC input voltage must be allowed adequate time to settle before the
  42          // conversion is made.  This settling depends on the external source
  43          // impedance, internal mux impedance, and internal capacitance.
  44          // Settling time is given by:
  45          //
  46          //                   | 2^n |
  47          //    Tsettle =   ln | --- | * Rtotal * Csample
  48          //                   | SA  |
  49          //
  50          // For example, assume Rtotal = 100 kohm. The expression evaluates to:
C51 COMPILER V9.60.0.0   EFM8LB1_ADC_EXTERNALINPUT                                         09/10/2021 16:28:02 PAGE 2   

  51          //
  52          //                   | 2^14 |
  53          //    Tsettle =   ln | ---- | * 105e3 * 5e-12 = 5.82 us
  54          //                   | 0.25 |
  55          //
  56          // In addition, one must allow at least 1.5uS after changing analog mux
  57          // inputs or PGA settings.  The settling time in this example, then, is
  58          // dictated by the large external source resistance.
  59          //
  60          // The conversion time is given in the datasheet (14-bit mode, SAR clock 18 MHz)
  61          // as 0.81 us.
  62          //
  63          // Tsample, minimum  = Tsettle + Tconvert
  64          //                   = 5.82 us + 0.81 us
  65          //                   = 6.63 us
  66          //
  67          // Timer2 is set to start a conversion every 100 us, which is far longer
  68          // than the minimum required.
  69          //
  70          // Resources:
  71          //   SYSCLK - 24.5 MHz HFOSC0 / 1
  72          //   ADC    - 14-bit, VREF = VDD (3.3V)
  73          //   UART0  - 115200 baud, 8-N-1
  74          //   Timer1 - UART0 clock source
  75          //   Timer2 - ADC start of conversion source
  76          //   P0.4   - UART0 TX
  77          //   P0.5   - UART0 RX
  78          //   P2.2   - Board Controller enable
  79          //   P3.4   - Display enable
  80          //
  81          //-----------------------------------------------------------------------------
  82          // How To Test: EFM8LB1 STK
  83          //-----------------------------------------------------------------------------
  84          // 1) Place the switch in "AEM" mode.
  85          // 2) Connect the EFM8LB1 STK board to a PC using a mini USB cable.
  86          // 3) Compile and download code to the EFM8LB1 STK board.
  87          //    In Simplicity Studio IDE, select Run -> Debug from the menu bar,
  88          //    click the Debug button in the quick menu, or press F11.
  89          // 4) On the PC, open HyperTerminal (or any other terminal program) and connect
  90          //    to the JLink CDC UART Port at 115200 baud rate and 8-N-1.
  91          // 5) Run the code.
  92          //    In Simplicity Studio IDE, select Run -> Resume from the menu bar,
  93          //    click the Resume button in the quick menu, or press F8.
  94          // 6) Move the joystick. The terminal program will print the voltage for
  95          //    each joystick position.
  96          //
  97          // Target:         EFM8LB1
  98          // Tool chain:     Generic
  99          //
 100          // Release 0.1 (ST)
 101          //    - Initial Revision
 102          //    - 06 MAR 2015
 103          //
 104          
 105          //-----------------------------------------------------------------------------
 106          // Includes
 107          //-----------------------------------------------------------------------------
 108          #include <SI_EFM8LB1_Register_Enums.h>
 109          #include <stdint.h>
 110          #include "InitDevice.h"
 111          #include "retargetserial.h"
 112          #include "vars.h"
 113          
C51 COMPILER V9.60.0.0   EFM8LB1_ADC_EXTERNALINPUT                                         09/10/2021 16:28:02 PAGE 3   

 114          //-----------------------------------------------------------------------------
 115          // Pin Definitions
 116          //-----------------------------------------------------------------------------
 117          SI_SBIT (DISP_EN, SFR_P3, 4);          // Display Enable
 118          #define DISP_BC_DRIVEN   0             // 0 = Board Controller drives display
 119          #define DISP_EFM8_DRIVEN 1             // 1 = EFM8 drives display
 120          
 121          SI_SBIT (BC_EN, SFR_P2, 2);            // Board Controller Enable
 122          #define BC_DISCONNECTED 0              // 0 = Board Controller disconnected
 123                                                 //     to EFM8 UART pins
 124          #define BC_CONNECTED    1              // 1 = Board Controller connected
 125                                                 //     to EFM8 UART pins
 126          
 127          
 128          SI_SBIT(PWRC, SFR_P1, 2);                  // P1.2 PWRC
 129          SI_SBIT(LED, SFR_P1, 0);                  // P1.0 LED
 130          
 131          
 132          
 133          float R1;
 134          float R2;
 135          float scale;
 136          const uint32_t xdata UUID _at_ 0xFFC3;
 137          uint32_t id;
 138          
 139          void _delay_ms(uint32_t ms);
 140          
 141          //-----------------------------------------------------------------------------
 142          // SiLabs_Startup() Routine
 143          // ----------------------------------------------------------------------------
 144          // This function is called immediately after reset, before the initialization
 145          // code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
 146          // useful place to disable the watchdog timer, which is enable by default
 147          // and may trigger before main() in some instances.
 148          //-----------------------------------------------------------------------------
 149          void SiLabs_Startup (void)
 150          {
 151   1        // Disable the watchdog here
 152   1        R1 = 5.6;
 153   1        R2 = 5.6;
 154   1        id = UUID;
 155   1        id = id & 0xFF;
 156   1      
 157   1      }
 158          #define F_CPU 24500000
 159          #define CPU_DIV 1
 160          #define SYSCLK_MS  ((F_CPU / CPU_DIV) / 1000.0) / 60.0 // Convert to oscillations per ms
 161          #define SYSCLK_US  ((F_CPU / CPU_DIV) / 1000000.0) // Convert to oscillations per us
 162          #define SUBTRACT_MS 7500.0 / 60.0 / CPU_DIV
 163          
 164          void _delay_ms(uint32_t ms){
 165   1       // Subtract n clock cycles for every ms to account for the time that the loop takes
 166   1       uint32_t clockCycles = SYSCLK_MS * ms;
 167   1       uint32_t substract = (SUBTRACT_MS * ms) + 34;
 168   1      
 169   1       if(clockCycles > substract) clockCycles -= substract;
 170   1      
 171   1       while(clockCycles-- > 0){
 172   2        _nop_();
 173   2       }
 174   1      }
 175          
 176          
C51 COMPILER V9.60.0.0   EFM8LB1_ADC_EXTERNALINPUT                                         09/10/2021 16:28:02 PAGE 4   

 177          /*
 178           * This function sets up the Bluetooth module
 179           * App Mode
 180           */
 181          
 182          void init_device(void) {
 183   1        uint8_t SFRPAGE_save;
 184   1        uint32_t someval;
 185   1        uint8_t your_id;
 186   1        unsigned char inputcharacter;
 187   1      
 188   1        LED = 1;
 189   1        PWRC = 0; // set AT mode
 190   1        someval = UUID;
 191   1      
 192   1        your_id = (uint8_t)(someval & 0xFF);
 193   1      
 194   1        SFRPAGE_save = SFRPAGE;
 195   1        SFRPAGE = LEGACY_PAGE;
 196   1        //RETARGET_PRINTF("AT+HOSTEN0\0");
 197   1      
 198   1        SFRPAGE = SFRPAGE_save;
 199   1        /*
 200   1        while(1) {
 201   1            inputcharacter = getchar();
 202   1            if (inputcharacter == 'K'){
 203   1                break;
 204   1            }
 205   1        }
 206   1        */
 207   1        _delay_ms(50);
 208   1      
 209   1        //SFRPAGE_save = SFRPAGE;
 210   1        //SFRPAGE = LEGACY_PAGE;
 211   1        RETARGET_PRINTF("AT+NAMESWM-%d",(int)your_id);
 212   1      
 213   1        //RETARGET_PRINTF("AT+NAMESWM-%u",(uint8_t)your_id);
 214   1            //RETARGET_PRINTF("%d",(int)12);
 215   1      
 216   1      
 217   1        //RETARGET_PRINTF("AT+NAMEHELLO");
 218   1      
 219   1        //RETARGET_PRINTF("HELLO");
 220   1      
 221   1        //SFRPAGE = SFRPAGE_save;
 222   1        /*
 223   1        while(1) {
 224   1              inputcharacter = getchar();
 225   1              if (inputcharacter == 'K'){
 226   1                  break;
 227   1              }
 228   1          }
 229   1          */
 230   1        _delay_ms(30);
 231   1        LED = 0;
 232   1        PWRC = 1; // unset AT mode
 233   1      
 234   1        // determine the scale and set accordingly
 235   1      
 236   1        switch(ADC0CN0 & ADC0CN0_ADGN__FMASK) {
 237   2          case ADC0CN0_ADGN__GAIN_0P75:
 238   2            scale = 0.75;
 239   2            break;
C51 COMPILER V9.60.0.0   EFM8LB1_ADC_EXTERNALINPUT                                         09/10/2021 16:28:02 PAGE 5   

 240   2          case ADC0CN0_ADGN__GAIN_0P5:
 241   2            scale = 0.5;
 242   2            break;
 243   2          case ADC0CN0_ADGN__GAIN_0P25:
 244   2            scale = 0.25;
 245   2            break;
 246   2          default:
 247   2            scale = 1;
 248   2      
 249   2      
 250   2        }
 251   1      }
*** WARNING C280 IN LINE 186 OF C:\Users\Ben\Documents\Git\wireless_measurements\software\firmware\EFM8_SWM\src\EFM8LB1_
             -ADC_ExternalInput.c: 'inputcharacter': unreferenced local variable
 252          
 253          void set_device_AT() {
 254   1      
 255   1        // RETARGET_PRINTF("AT+HOSTEN");
 256   1      
 257   1        //inputcharacter = getchar();
 258   1        PWRC = 0; // set AT mode
 259   1      
 260   1        RETARGET_PRINTF("AT+NAMESWM-%d",500);
 261   1      
 262   1        PWRC = 1; // unset AT mode
 263   1      
 264   1      
 265   1      }
 266          
 267          //-----------------------------------------------------------------------------
 268          // Main Routine
 269          //-----------------------------------------------------------------------------
 270          void main (void)
 271          {
 272   1        uint8_t SFRPAGE_save;
 273   1        uint8_t LED_state;
 274   1        LED_state = 0;
 275   1      
 276   1         enter_DefaultMode_from_RESET();
 277   1      
 278   1         DISP_EN = DISP_BC_DRIVEN;           // Display not driven by EFM8
 279   1      
 280   1         BC_EN = BC_CONNECTED;               // Board controller connected to EFM8
 281   1                                             // UART pins
 282   1      
 283   1         SCON0_TI = 1;                       // This STDIO library requires TI to
 284   1                                             // be set for prints to occur
 285   1      
 286   1      
 287   1      
 288   1      
 289   1         IE_EA = 1;                          // Enable global interrupts
 290   1         init_device(); // init device before we start ADC sampling
 291   1         //set_device_chars();
 292   1      
 293   1         while (1) {
 294   2      
 295   2      
 296   2             if (send_msg==4) {
 297   3      
 298   3                 send_msg = 0;
 299   3                 if (LED_state==0){
 300   4                     LED = 1;
C51 COMPILER V9.60.0.0   EFM8LB1_ADC_EXTERNALINPUT                                         09/10/2021 16:28:02 PAGE 6   

 301   4                     LED_state = 1;
 302   4                 } else {
 303   4                     LED = 0;
 304   4                     LED_state = 0;
 305   4                 }
 306   3      
 307   3      
 308   3      
 309   3      
 310   3                 //SFRPAGE_save = SFRPAGE;
 311   3                 //SFRPAGE = LEGACY_PAGE;
 312   3                 RETARGET_PRINTF ("%d,%d,%d,%d",adc1,adc2,adc3,adc4);
 313   3      
 314   3                 //printf("%d,%d,%d,%d",adc1,adc2,adc3,adc4);
 315   3                 //SFRPAGE = SFRPAGE_save;
 316   3      
 317   3             }
 318   2         }
 319   1      }
*** WARNING C280 IN LINE 272 OF C:\Users\Ben\Documents\Git\wireless_measurements\software\firmware\EFM8_SWM\src\EFM8LB1_
             -ADC_ExternalInput.c: 'SFRPAGE_save': unreferenced local variable


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    511    ----
   CONSTANT SIZE    =     26    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     37    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
